const UpdateType CommandUpdate = UpdateType.Trigger | UpdateType.Terminal;
KProperty MyProperty;

MyCommandLine commandLine = new MyCommandLine();

BlockSystem<IMyMotorStator> stators = null;
BlockSystem<IMyPistonBase> pistonUp = null;
BlockSystem<IMyPistonBase> pistonDown = null;
BlockSystem<IMyPistonBase> pistonRayon = null;
BlockSystem<IMyShipDrill> drills = null;

private StateMachine stateMachine = StateMachine.Stopped;
private Phase phase = Phase.None;

private IMyTextSurface drawingSurface;

private bool brasOut = true;
private bool slowDown = false;

private float targetRayon;
private float deltaRayon = 2f;
private float targetAngle;
private float deltaAngle = 10f; // 15° non optimal

private float SPEED_MIN = 0.15f*3;
private float SPEED_MAX = 1f; // 1 trop rapide

private float ANGLE_RPM_MIN = 0.1f;
private float ANGLE_RPM_MAX = 0.5f;
private float ANGLE_DELTA = 0f;
private float ANGLE_MIN = 30f;
private float ANGLE_MAX = 140f;

private double quantity = 0f;
private double lastQuantity = 0f;

public Program()
{
    MyProperty = new KProperty(this);
    MyProperty.Load();
    drawingSurface = Me.GetSurface(0);
    drawingSurface.ContentType = ContentType.TEXT_AND_IMAGE;
    // Set the continuous update frequency of this script
    Runtime.UpdateFrequency = UpdateFrequency.Update10;
    phase = Phase.None;
    Prepare();
}

public void Save()
{
    MyProperty.Save();
}

private void Prepare()
{
    stators = BlockSystem<IMyMotorStator>.SearchByTag(this, MyProperty.Search_Rotor);
    pistonUp = BlockSystem<IMyPistonBase>.SearchByTag(this, MyProperty.Search_Piston_Up);
    pistonDown = BlockSystem<IMyPistonBase>.SearchByTag(this, MyProperty.Search_Piston_Down);
    pistonRayon = BlockSystem<IMyPistonBase>.SearchByTag(this, MyProperty.Search_Piston_Rayon);
    drills = BlockSystem<IMyShipDrill>.SearchByTag(this, MyProperty.Search_Drill);
    SetTargetValues();
}

public void Main(string argument, UpdateType updateType)
{
    if ((updateType & CommandUpdate) != 0)
    {
        RunCommand(argument);
    }
    if ((updateType & UpdateType.Update10) != 0)
    {
        RunContinuousLogic();
    }
}

void RunContinuousLogic()
{
    quantity = DrillCount();
    if (quantity > 10 && quantity > lastQuantity) slowDown = true;
    lastQuantity = quantity;
    Display();
    if (quantity > 10000) stateMachine = StateMachine.Waitting;
    switch (stateMachine)
    {
        case StateMachine.Initializing:
            Initializing();
            break;
        case StateMachine.Running:
            Running();
            break;
        case StateMachine.RotorZero:
            RotorZero();
            break;
        case StateMachine.Stopping:
            pistonUp.Off();
            pistonDown.Off();
            pistonRayon.Off();
            stators.Lock();
            drills.Off();
            break;
        case StateMachine.Waitting:
            pistonUp.Off();
            pistonDown.Off();
            pistonRayon.Off();
            stators.Lock();
            drills.Off();
            if (quantity == 0) stateMachine = StateMachine.Running;
            break;
    }
}

private void Running()
{
    int factor = pistonDown.List.Count + pistonUp.List.Count;
    if (stators.IsEmpty) Prepare();

    switch (phase)
    {
        case Phase.None:
            phase = Phase.PistonDown;
            break;
        case Phase.PistonDown:
            drills.On();
            pistonDown.ForEach(delegate (IMyPistonBase block) {
                if (slowDown) block.Velocity = SPEED_MIN / factor;
                else block.Velocity = SPEED_MAX / factor;
            });
            pistonUp.ForEach(delegate (IMyPistonBase block) {
                if (slowDown) block.Velocity = -SPEED_MIN / factor;
                else block.Velocity = -SPEED_MAX / factor;
            });
            pistonDown.On();
            pistonUp.On();
            if (pistonDown.IsPositionMax() && pistonUp.IsPositionMin()) phase = Phase.PistonUp;
            break;
        case Phase.PistonUp:
            slowDown = false;
            pistonDown.ForEach(delegate (IMyPistonBase block) {
                block.Velocity = -SPEED_MAX;
            });
            pistonUp.ForEach(delegate (IMyPistonBase block) {
                block.Velocity = SPEED_MAX;
            });
            pistonDown.On();
            pistonUp.On();
            if (pistonDown.IsPositionMin() && pistonUp.IsPositionMax()) phase = Phase.Bras;
            break;
        case Phase.Bras:
            if (brasOut && pistonRayon.IsPositionMax())
            {
                targetAngle += deltaAngle;
                brasOut = false;
                phase = Phase.Rotor;
            }
            else if (!brasOut && pistonRayon.IsPositionMin())
            {
                targetAngle += deltaAngle;
                brasOut = true;
                phase = Phase.Rotor;
            }
            else
            {
                if (brasOut)
                {
                    targetRayon += Math.Min(deltaRayon, 10f);
                    if (targetRayon > 10f) targetRayon = 10f;
                    phase = Phase.BrasOut;
                }
                else
                {
                    targetRayon -= Math.Min(deltaRayon, 10f);
                    if (targetRayon < 0f) targetRayon = 0f;
                    phase = Phase.BrasIn;
                }
            }
            break;
        case Phase.BrasIn:
            pistonRayon.On();
            pistonRayon.ForEach(delegate (IMyPistonBase block) {
                block.Velocity = -SPEED_MAX;
            });
            if (pistonRayon.IsPosition(targetRayon))
            {
                pistonRayon.Off();
                phase = Phase.PistonDown;
            }
            break;
        case Phase.BrasOut:
            pistonRayon.On();
            pistonRayon.ForEach(delegate (IMyPistonBase block) {
                block.Velocity = SPEED_MAX;
            });
            if (pistonRayon.IsPosition(targetRayon))
            {
                pistonRayon.Off();
                phase = Phase.PistonDown;
            }
            break;
        case Phase.Rotor:
            stators.ForEach(delegate (IMyMotorStator block) {
                block.TargetVelocityRPM = ANGLE_RPM_MIN;
            });
            stators.Unlock();
            if (stators.IsPositionMax())
            {
                stateMachine = StateMachine.Stopping;
                phase = Phase.None;
            }
            else if (stators.IsPosition(targetAngle))
            {
                stators.Lock();
                phase = Phase.PistonDown;
            }
            break;
    }
}

private void Initializing()
{
    switch (phase)
    {
        case Phase.None:
            targetRayon = 0f;
            targetAngle = ANGLE_MIN;
            phase = Phase.PistonUp;
            break;
        case Phase.PistonUp:
            pistonDown.ForEach(delegate (IMyPistonBase block) {
                block.Velocity = -SPEED_MAX;
            });
            pistonUp.ForEach(delegate (IMyPistonBase block) {
                block.Velocity = SPEED_MAX;
            });
            pistonDown.On();
            pistonUp.On();
            if (pistonDown.IsPositionMin() && pistonUp.IsPositionMax()) phase = Phase.Rotor;
            break;
        case Phase.Rotor:
            InitRotor();
            if (stators.IsPositionMin())
            {
                stators.Lock();
                phase = Phase.BrasIn;
            }
            break;
        case Phase.BrasIn:
            pistonRayon.On();
            pistonRayon.ForEach(delegate (IMyPistonBase block) {
                block.Velocity = -SPEED_MAX;
            });
            if (pistonRayon.IsPositionMin())
            {
                drills.Off();
                phase = Phase.None;
                stateMachine = StateMachine.Stopped;
            }
            break;
    }
}

private void RotorZero()
{

    switch (phase)
    {
        case Phase.None:
            phase = Phase.PistonUp;
            stators.ForEach(delegate (IMyMotorStator block) {
                block.ApplyAction("OnOff_On");
                block.TargetVelocityRPM = -ANGLE_RPM_MAX;
                block.LowerLimitDeg = -360f;
                block.UpperLimitDeg = 360f;
                block.RotorLock = false;
                targetAngle = 0f;
            });
            break;
        case Phase.Rotor:
            if (stators.IsPosition(targetAngle))
            {
                stators.Lock();
                phase = Phase.None;
                stateMachine = StateMachine.Stopped;
            }
            break;
    }
}

private void Display()
{
    drawingSurface.WriteText($"Machine Status:{stateMachine}", false);
    drawingSurface.WriteText($"\nPhase:{phase}", true);
    drawingSurface.WriteText($"\nTarget Rayon:{Math.Round(targetRayon, 2)}", true);
    drawingSurface.WriteText($"\nTarget Angle:{Math.Round(targetAngle, 2)}", true);
    drawingSurface.WriteText($"\nDrill Quantity:{Util.GetKiloFormat(quantity)}", true);

    pistonUp.ForEach(delegate (IMyPistonBase block) {
        drawingSurface.WriteText($"\n{block.CustomName}: {block.Velocity} | P={Math.Round(block.CurrentPosition, 2)} | On={block.IsWorking}", true);
    });
    pistonDown.ForEach(delegate (IMyPistonBase block) {
        drawingSurface.WriteText($"\n{block.CustomName}: {block.Velocity} | P={Math.Round(block.CurrentPosition, 2)} | On={block.IsWorking}", true);
    });
    pistonRayon.ForEach(delegate (IMyPistonBase block) {
        drawingSurface.WriteText($"\n{block.CustomName}: {block.Velocity} | P={Math.Round(block.CurrentPosition, 2)} | On={block.IsWorking}", true);
    });
    stators.ForEach(delegate (IMyMotorStator block) {
        drawingSurface.WriteText($"\n{block.CustomName}: {block.TargetVelocityRPM} | A°={Math.Round(Util.RadToDeg(block.Angle) + ANGLE_DELTA, 2)} | Lock={block.RotorLock}", true);
    });
}

private void RunCommand(string argument)
{
    MyProperty.Load();
    if (argument != null)
    {
        commandLine.TryParse(argument);
        var command = commandLine.Argument(0);

        switch (command)
        {
            case "start":
                slowDown = false;
                stateMachine = StateMachine.Running;
                break;
            case "stop":
                stateMachine = StateMachine.Stopping;
                break;
            case "reset":
                Prepare();
                stateMachine = StateMachine.Initializing;
                break;
            case "prepare":
                Prepare();
                break;
            case "rotorZero":
                stateMachine = StateMachine.RotorZero;
                phase = Phase.None;
                break;
            default:
                Prepare();
                break;
        }
    }
}

private void SetTargetValues()
{
    pistonRayon.ForEach(delegate (IMyPistonBase block) {
        targetRayon = block.CurrentPosition;
    });
    stators.ForEach(delegate (IMyMotorStator block) {
        targetAngle = float.Parse(Util.RadToDeg(block.Angle).ToString());
    });
}

private void InitRotor()
{
    stators.ForEach(delegate (IMyMotorStator block) {
        block.ApplyAction("OnOff_On");
        block.TargetVelocityRPM = -ANGLE_RPM_MAX;
        block.LowerLimitDeg = ANGLE_MIN;
        block.UpperLimitDeg = ANGLE_MAX;
        block.RotorLock = false;
        targetAngle = block.LowerLimitDeg;
    });
}

private double DrillCount()
{
    if (drills == null || drills.IsEmpty) return 0;
    double count = 0;
    foreach (IMyShipDrill drill in drills.List)
    {
        IMyInventory drill_inventory = drill.GetInventory(0);
        List<MyInventoryItem> items = new List<MyInventoryItem>();
        drill_inventory.GetItems(items);
        foreach (MyInventoryItem item in items)
        {
            double amount = 0;
            Double.TryParse(item.Amount.ToString(), out amount);
            count += amount;
        }
    }
    return count;
}

public enum StateMachine
{
    Stopped,
    Stopping,
    Initializing,
    Running,
    RotorZero,
    Waitting
}

public enum Phase
{
    None,
    PistonUp,
    PistonDown,
    Rotor,
    BrasIn,
    Bras,
    BrasOut
}
public class Lcd
{
    public Program myProgram;
    public List<IMyTextPanel> panel_list = new List<IMyTextPanel>();

    public Lcd(Program program)
    {
        myProgram = program;
    }

    public void Search(string tag)
    {
        panel_list.Clear();
        myProgram.GridTerminalSystem.GetBlocksOfType<IMyTextPanel>(panel_list, block => block.CustomName.Contains(tag));
        myProgram.Echo(String.Format("Lcd <{0}> found:{1}", tag, panel_list.Count));
        if (panel_list.Count > 0)
        {
            foreach (IMyTextPanel panel in panel_list)
            {
                panel.BackgroundColor = Color.Black;
                panel.ScriptBackgroundColor = Color.Black;
            }
        }
    }

    public void Print(StringBuilder message, bool append)
    {
        foreach (IMyTextPanel panel in panel_list)
        {
            panel.ContentType = ContentType.TEXT_AND_IMAGE;
            panel.WriteText(message, append);
        }

    }

    public bool IsEmpty
    {
        get
        {
            return panel_list.Count == 0;
        }
    }


}
public class KProperty
{
    protected MyIni MyIni = new MyIni();
    protected Program program;

    public string Search_Rotor;
    public string Search_Drill;
    public string Search_Piston_Up;
    public string Search_Piston_Down;
    public string Search_Piston_Rayon;

    public KProperty(Program program)
    {
        this.program = program;
    }

    public void Load()
    {
        MyIniParseResult result;
        if (!MyIni.TryParse(program.Me.CustomData, out result))
            throw new Exception(result.ToString());
        Search_Rotor = MyIni.Get("Search", "Rotor").ToString("RotorDrill");
        Search_Drill = MyIni.Get("Search", "Drill").ToString("BaseDrill");
        Search_Piston_Up = MyIni.Get("Search", "PistonUp").ToString("PistonUp");
        Search_Piston_Down = MyIni.Get("Search", "PistonDown").ToString("PistonDown");
        Search_Piston_Rayon = MyIni.Get("Search", "PistonRayon").ToString("PistonRadial");
        if (program.Me.CustomData.Equals(""))
        {
            Save();
        }
    }

    public void Save()
    {
        MyIniParseResult result;
        if (!MyIni.TryParse(program.Me.CustomData, out result))
            throw new Exception(result.ToString());
        MyIni.Set("Search", "Rotor", Search_Rotor);
        MyIni.Set("Search", "Drill", Search_Drill);
        MyIni.Set("Search", "PistonUp", Search_Piston_Up);
        MyIni.Set("Search", "PistonDown", Search_Piston_Down);
        MyIni.Set("Search", "PistonRayon", Search_Piston_Rayon);
        program.Me.CustomData = MyIni.ToString();
    }
}
public class BlockSystem<T> where T: class
{
    protected Program program;
    public List<T> List = new List<T>();

    public BlockSystem(){
        List = new List<T>();
    }

    public static BlockSystem<T> SearchBlocks(Program program, Func<T, bool> collect = null, string info = null)
    {
        List<T> list = new List<T>();
        try
        {
            program.GridTerminalSystem.GetBlocksOfType<T>(list, collect);
        }
        catch { }
        if(info == null) program.Echo(String.Format("List <{0}> count: {1}", typeof(T).Name, list.Count));
        else program.Echo(String.Format("List <{0}> count: {1}", info, list.Count));

        return new BlockSystem<T>()
        {
            program = program,
            List = list
        };
        }
    public static BlockSystem<T> SearchByTag(Program program, string tag)
    {
        return BlockSystem<T>.SearchBlocks(program, block => ((IMyTerminalBlock)block).CustomName.Contains(tag), tag);
    }
    public static BlockSystem<T> SearchByName(Program program, string name)
    {
        return BlockSystem<T>.SearchBlocks(program, block => ((IMyTerminalBlock)block).CustomName.Equals(name), name);
    }
    public static List<IMyBlockGroup> SearchGroups(Program program, Func<IMyBlockGroup, bool> collect = null)
    {
        List<IMyBlockGroup> list = new List<IMyBlockGroup>();
        try
        {
            program.GridTerminalSystem.GetBlockGroups(list, collect);
        }
        catch { }
        program.Echo(String.Format("List <IMyBlockGroup> count: {0}", list.Count));

        return list;
    }
    public static BlockSystem<T> SearchByGroup(Program program, string name)
    {
        List<T> list = new List<T>();
        IMyBlockGroup group = null;
        try
        {
            group = program.GridTerminalSystem.GetBlockGroupWithName(name);
        }
        catch { }
        if (group != null) group.GetBlocksOfType<T>(list);
        program.Echo(String.Format("List <{0}> count: {1}", name, list.Count));

        return new BlockSystem<T>()
        {
            program = program,
            List = list
        };
    }
    public static BlockSystem<T> SearchByGrid(Program program, IMyCubeGrid cubeGrid)
    {
        return BlockSystem<T>.SearchBlocks(program, block => ((IMyTerminalBlock)block).CubeGrid == cubeGrid);
    }

    public static BlockSystem<T> SearchByFilter(Program program, BlockFilter<T> filter)
    {
        List<T> list = new List<T>();
        try
        {
            if (filter.ByGroup)
            {
                List<IMyBlockGroup> groups = new List<IMyBlockGroup>();
                program.GridTerminalSystem.GetBlockGroups(groups, filter.GroupVisitor());
                List<T> group_list = new List<T>();
                groups.ForEach(delegate (IMyBlockGroup group)
                {
                    group_list.Clear();
                    group.GetBlocksOfType<T>(list, filter.BlockVisitor());
                    list.AddList(group_list);
                });
            }
            else
            {
                program.GridTerminalSystem.GetBlocksOfType<T>(list, filter.BlockVisitor());
            }
        }
        catch { }
        program.Echo(String.Format("List<{0}>:{1}", filter.Value, list.Count));
        return new BlockSystem<T>()
        {
            program = program,
            List = list
        };
    }

    public static List<IMyBlockGroup> SearchGroupFilter(Program program, BlockFilter<T> filter)
    {
        List<IMyBlockGroup> groups = new List<IMyBlockGroup>();
        try
        {
            if (filter.ByGroup)
            {
                program.GridTerminalSystem.GetBlockGroups(groups, filter.GroupVisitor());
            }
        }
        catch { }
        program.Echo(String.Format("List <{0}> count: {1}", filter.Value, groups.Count));
        return groups;
    }

    public void ForEach(Action<T> action)
    {
        if (!IsEmpty)
        {
            List.ForEach(action);
        }
    }

    public bool IsPosition(float position, float epsilon = 0.1f)
    {
        bool isState = true;
        if (!IsEmpty)
        {
            if (List is List<IMyPistonBase>)
            {
                foreach (IMyPistonBase block in List)
                {
                    float value = block.CurrentPosition - position;
                    if (Math.Abs(value) > epsilon) isState = false;
                }
            }
            if (List is List<IMyMotorStator>)
            {
                foreach (IMyMotorStator block in List)
                {
                    float value = block.Angle - float.Parse(Util.DegToRad(position).ToString());
                    if (Math.Abs(value) > epsilon) isState = false;
                }
            }
        }
        return isState;
    }

    public bool IsMorePosition(float position)
    {
        bool isState = true;
        if (!IsEmpty)
        {
            if (List is List<IMyPistonBase>)
            {
                foreach (IMyPistonBase block in List)
                {
                    if (block.CurrentPosition < position) isState = false;
                }
            }
            if (List is List<IMyMotorStator>)
            {
                foreach (IMyMotorStator block in List)
                {
                    if (block.Angle < float.Parse(Util.DegToRad(position).ToString())) isState = false;
                }
            }
        }
        return isState;
    }

    public bool IsLessPosition(float position)
    {
        bool isState = true;
        if (!IsEmpty)
        {
            if (List is List<IMyPistonBase>)
            {
                foreach (IMyPistonBase block in List)
                {
                    if (block.CurrentPosition > position) isState = false;
                }
            }
            if (List is List<IMyMotorStator>)
            {
                foreach (IMyMotorStator block in List)
                {
                    if (block.Angle > float.Parse(Util.DegToRad(position).ToString())) isState = false;
                }
            }
        }
        return isState;
    }

    public bool IsPositionMax(float epsilon = 0.1f)
    {
        bool isState = true;
        if (!IsEmpty)
        {
            if (List is List<IMyPistonBase>)
            {
                foreach (IMyPistonBase block in List)
                {
                    float value = block.CurrentPosition - block.MaxLimit;
                    if (Math.Abs(value) > epsilon) isState = false;
                }
            }
            if (List is List<IMyMotorStator>)
            {
                foreach (IMyMotorStator block in List)
                {
                    float value = block.Angle - block.UpperLimitRad;
                    if (Math.Abs(value) > epsilon/100) isState = false;
                }
            }
        }
        return isState;
    }

    public bool IsPositionMin(float epsilon = 0.1f)
    {
        bool isState = true;
        if (!IsEmpty)
        {
            if (List is List<IMyPistonBase>)
            {
                foreach (IMyPistonBase block in List)
                {
                    float value = block.CurrentPosition - block.MinLimit;
                    if (Math.Abs(value) > epsilon) isState = false;
                }
            }
            if (List is List<IMyMotorStator>)
            {
                foreach (IMyMotorStator block in List)
                {
                    float value = block.Angle - block.LowerLimitRad;
                    if (Math.Abs(value) > epsilon / 100) isState = false;
                }
            }
        }
        return isState;
    }

    public void Velocity(float velocity)
    {
        if (!IsEmpty)
        {
            if (List is List<IMyPistonBase>)
            {
                foreach (IMyPistonBase block in List)
                {
                    block.Velocity = velocity;
                }
            }
            if (List is List<IMyMotorStator>)
            {
                foreach (IMyMotorStator block in List)
                {
                    block.TargetVelocityRPM = velocity;
                }
            }
        }
    }

    public void ApplyAction(string action)
    {
        if (!IsEmpty)
        {
            foreach (IMyTerminalBlock block in List)
            {
                block.ApplyAction(action);
            }
        }
    }
    public void On()
    {
        ApplyAction("OnOff_On");
    }
    public bool IsOn()
    {
        bool isState = true;
        if (!IsEmpty)
        {
            foreach (IMyTerminalBlock block in List)
            {
                if (!block.GetValueBool("OnOff")) isState = false;
            }
        }
        return isState;
    }
    public void Off()
    {
        ApplyAction("OnOff_Off");
    }

    public bool IsOff()
    {
        return !IsOn();
    }

    public void Lock()
    {
        if (!IsEmpty)
        {
            if (List is List<IMyMotorStator>)
            {
                foreach (IMyMotorStator block in List)
                {
                    block.RotorLock = true;
                }
            }
            else
            {
                ApplyAction("Lock");
            }
        }
    }
    public void Unlock()
    {
        if (!IsEmpty)
        {
            if (List is List<IMyMotorStator>)
            {
                foreach (IMyMotorStator block in List)
                {
                    block.RotorLock = false;
                }
            }
            else
            {
                ApplyAction("Unlock");
            }
        }
    }
    public void Merge(BlockSystem<T> blockSystem)
    {
        List.AddList(blockSystem.List);
    }

    public bool IsEmpty
    {
        get
        {
            if (List != null && List.Count > 0)
            {
                return false;
            }
            return true;
        }
    }

    public T First
    {
        get
        {
            if (!IsEmpty)
            {
                return List.First();
            }
            return null;
        }
    }
}

public class BlockFilter<T> where T : class
{
    public string Value;
    public string Filter;
    public IMyCubeGrid CubeGrid;
    public bool ByContains = false;
    public bool ByGroup = false;
    public bool MultiGrid = false;
    public bool HasInventory = false;

    public static BlockFilter<T> Create(IMyTerminalBlock parent, string filter)
    {
        BlockFilter<T> blockFilter = new BlockFilter<T>
        {
            Value = filter,
            CubeGrid = parent.CubeGrid
        };
        if (filter.Contains(":"))
        {
            string[] values = filter.Split(':');
            if (values[0].Contains("C")) blockFilter.ByContains = true;
            if (values[0].Contains("G")) blockFilter.ByGroup = true;
            if (values[0].Contains("M")) blockFilter.MultiGrid = true;
            if (!values[1].Equals("*")) blockFilter.Filter = values[1];
        }
        else
        {
            if(!filter.Equals("*")) blockFilter.Filter = filter;
        }
        return blockFilter;
    }
    public Func<T, bool> BlockVisitor()
    {
        return delegate(T block) {
            IMyTerminalBlock tBlock = (IMyTerminalBlock)block;
            bool state = true;
            if (Filter != null && !ByGroup)
            {
                if (ByContains) { if (!tBlock.CustomName.Contains(Filter)) state = false; }
                else { if (!tBlock.CustomName.Equals(Filter)) state = false; }
            }
            if (!MultiGrid) { if (tBlock.CubeGrid != CubeGrid) state = false; }
            if (HasInventory) { if (!tBlock.HasInventory) state = false; }
            return state;
        };
    }

    public Func<IMyBlockGroup, bool> GroupVisitor()
    {
        return delegate (IMyBlockGroup group) {
            bool state = true;
            if (Filter != null && ByGroup)
            {
                if (ByContains) { if (!group.Name.Contains(Filter)) state = false; }
                else { if (!group.Name.Equals(Filter)) state = false; }
            }
            return state;
        };
    }
}
public class Util
{
    static public string GetKiloFormat(double value)
    {
        double pow = 1.0;
        string suffix = "";
        if (value > 1000.0)
        {
            int y = int.Parse(Math.Floor(Math.Log10(value) / 3).ToString());
            suffix = "KMGTPEZY".Substring(y - 1, 1);
            pow = Math.Pow(10, y * 3);
        }
        return String.Format("{0:0.0}{1}", (value / pow), suffix);

    }

    static public double RadToDeg(float angle)
    {
        return angle * 180 / Math.PI;
    }
    static public double DegToRad(float angle)
    {
        return angle * Math.PI / 180;
    }
    static public string GetType(MyInventoryItem inventory_item)
    {
        return inventory_item.Type.TypeId;
    }

    static public string GetName(MyInventoryItem inventory_item)
    {
        return inventory_item.Type.SubtypeId;
    }
    static public string GetType(MyProductionItem production_item)
    {
        MyDefinitionId itemDefinitionId;
        string subtypeName = production_item.BlueprintId.SubtypeName;
        string typeName = Util.GetName(production_item);
        if ((subtypeName.EndsWith("Rifle") || subtypeName.StartsWith("Welder") || subtypeName.StartsWith("HandDrill") || subtypeName.StartsWith("AngleGrinder"))
            && MyDefinitionId.TryParse("MyObjectBuilder_PhysicalGunObject", typeName, out itemDefinitionId)) return itemDefinitionId.TypeId.ToString();
        if (subtypeName.StartsWith("Hydrogen") && MyDefinitionId.TryParse("MyObjectBuilder_GasContainerObject", typeName, out itemDefinitionId)) return itemDefinitionId.TypeId.ToString();
        if (subtypeName.StartsWith("Oxygen") && MyDefinitionId.TryParse("MyObjectBuilder_OxygenContainerObject", typeName, out itemDefinitionId)) return itemDefinitionId.TypeId.ToString();
        if ((subtypeName.Contains("Missile") || subtypeName.EndsWith("Magazine")) && MyDefinitionId.TryParse("MyObjectBuilder_AmmoMagazine", typeName, out itemDefinitionId)) return itemDefinitionId.TypeId.ToString();
        if (MyDefinitionId.TryParse("MyObjectBuilder_Component", typeName, out itemDefinitionId)) return itemDefinitionId.TypeId.ToString();
        return production_item.BlueprintId.TypeId.ToString();
    }

    static public string GetName(MyProductionItem production_item)
    {
        string subtypeName = production_item.BlueprintId.SubtypeName;
        if (subtypeName.EndsWith("Component")) subtypeName = subtypeName.Replace("Component", "");
        if (subtypeName.EndsWith("Rifle") || subtypeName.StartsWith("Welder") || subtypeName.StartsWith("HandDrill") || subtypeName.StartsWith("AngleGrinder")) subtypeName = subtypeName + "Item";
        if (subtypeName.EndsWith("Magazine")) subtypeName = subtypeName.Replace("Magazine", "");
        return subtypeName;
    }

    static public string CutString(string value, int limit)
    {
        if(value.Length > limit)
        {
            int len = (limit - 3) / 2;
            return value.Substring(0, len) + "..." + value.Substring(value.Length - len, len);
        }
        return value;
    }
}